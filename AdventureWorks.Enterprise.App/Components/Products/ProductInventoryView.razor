@using AdventureWorks.Enterprise.App.Models
@using AdventureWorks.Enterprise.App.Services
@inject ApiService ApiService
@inject NavigationManager Navigation
@rendermode InteractiveServer

@page "/product-inventory/{ProductId:int}"

<PageTitle>Inventario de Producto</PageTitle>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-boxes me-2"></i>Inventario de Producto
        </h5>
    </div>
    <div class="card-body">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
        else if (Product != null && Inventory != null)
        {
            <div class="row">
                <div class="col-md-6">
                    <h6 class="text-primary mb-3">
                        <i class="fas fa-box me-2"></i>Información de Producto
                    </h6>
                    <div class="mb-3"><strong>Nombre:</strong> @Product.Name</div>
                    <div class="mb-3"><strong>Número:</strong> @Product.ProductNumber</div>
                    <div class="mb-3"><strong>Color:</strong> @Product.Color</div>
                    <div class="mb-3"><strong>Precio:</strong> @Product.ListPrice.ToString("C")</div>
                </div>
                <div class="col-md-6">
                    <h6 class="text-primary mb-3">
                        <i class="fas fa-warehouse me-2"></i>Inventario
                    </h6>
                    <div class="mb-3"><strong>Ubicación:</strong> @Inventory.LocationID</div>
                    <div class="mb-3"><strong>Shelf:</strong> @Inventory.Shelf</div>
                    <div class="mb-3"><strong>Bin:</strong> @Inventory.Bin</div>
                    <div class="mb-3"><strong>Cantidad:</strong> @Inventory.Quantity</div>
                </div>
            </div>
            <div class="d-flex justify-content-end gap-2 mt-4">
                <button type="button" class="btn btn-secondary" @onclick="NavigateToList">
                    <i class="fas fa-arrow-left me-2"></i>Cancelar
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int ProductId { get; set; }
    private ProductReadDto? Product;
    private ProductInventoryReadDto? Inventory;
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        ErrorMessage = string.Empty;
        var prodResult = await ApiService.FncGetProductByIdAsync(ProductId);
        if (prodResult.Status && prodResult.Data != null)
        {
            Product = prodResult.Data;
            // Para demo, se asume LocationID = 1
            var invResult = await ApiService.FncGetProductInventoryByIdAsync(ProductId, 1);
            if (invResult.Status && invResult.Data != null)
            {
                Inventory = invResult.Data;
            }
            else
            {
                ErrorMessage = invResult.Message;
            }
        }
        else
        {
            ErrorMessage = prodResult.Message;
        }
        IsLoading = false;
    }

    private void NavigateToList()
    {
        Navigation.NavigateTo("/products");
    }
}
